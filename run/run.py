import os
from pprint import pprint 
import itertools
import subprocess
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import sys 
import signal
import matplotlib
import resource

run_id = os.popen("date +%s | sha256sum | base64 | head -c 8").read()

# setting up the basic paths
# read the env for the base dir 
base_dir = os.environ.get("PSIM_BASE_DIR")
print("base_dir:", base_dir)
build_path = base_dir + "/build"
run_path = base_dir + "/run"
base_executable = build_path + "/psim"
executable = build_path + "/psim-" + run_id
use_gdb = False

# build the executable, exit if build fails
os.chdir(build_path)
# run the make -j command, get the exit code
exit_code = os.system("make -j")
if exit_code != 0:
    print("make failed, exiting")
    sys.exit(1)
os.chdir(run_path)
os.system("cp {} {}".format(base_executable, executable))


# get the parameters from the command line
params = {}
for i, arg in enumerate(sys.argv):
    if i == 0:
        continue
    p = arg.split("=")
    key = p[0][2:]
    if len(p) == 1:
        val = True
    else:
        val = p[1]
        if val == "true":
            val = True
        if val == "false":
            val = False
    params[key] = val
    
if "gdb" in params:
    use_gdb = True
    del params["gdb"]

options = {
    "protocol-file-dir": base_dir + "/input/128search-dpstart-2",
    "protocol-file-name": "candle128-simtime.txt",

    # "protocol-file-dir": base_dir + "/input/base",
    # "protocol-file-name": "simple.txt",

    "step-size": 10,
    "core-status-profiling-interval": 10,
    "rep-count": 10, 
    "link-bandwidth": 100,
    "initial-rate": 100,
    "min-rate": 10,
    "ft-core-count": 8,
    "ft-agg-per-pod": 4,
    "console-log-level": 4,
    "file-log-level": 4,
    "ft-server-tor-link-capacity-mult": 1,
    "ft-tor-agg-link-capacity-mult": 100,
    "ft-agg-core-link-capacity-mult": 0.5,
    "priority-allocator": "fairshare", #"priorityqueue", 
    "core-selection-mechanism": "futureload",
    "load-metric": "utilization",
    "shuffle-device-map": True,
    "shuffle-map-file": base_dir + "/input/shuffle/shuffle-map.txt",
    "network-type": "fattree",
    "ft-server-per-rack": 8,
}

options.update(params)

# create the command
cmd = executable
for option in options.items():
    if option[1] is False:
        continue
    elif option[1] is True:
        cmd += " --" + option[0]
    else: 
        cmd += " --" + option[0] + "=" + str(option[1])

if use_gdb:
    cmd = "gdb --args " + cmd
    
print("running the command:", cmd)            

# subprocess.run(cmd, stdout=sys.stdout, stderr=sys.stderr, shell=True)

# run the command, print the output as it's generated by the subprocess
# maintain the color coding of the output

psim_times = []

memory_limit_kb = 10 * 1e9
memory_limit_kb = int(memory_limit_kb)
resource.setrlimit(resource.RLIMIT_AS, (memory_limit_kb, memory_limit_kb))

p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True, preexec_fn=os.setsid)
for line in iter(p.stdout.readline, b''):
    output = line.decode("utf-8")
    if "psim time:" in output:
        psim_times.append(float(output.split("psim time:")[1]))        
    print(output, end="")
    sys.stdout.flush()
    sys.stderr.flush()


plt.plot(psim_times)
plt.xticks(np.arange(0, len(psim_times), 1.0))
plt.savefig("psim-times.png")


os.system("rm {}".format(executable))